name: Nestjs CI

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      # - name: Run lint
      #   run: npm run lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      # - name: Run lint
      #   run: npm run lint
      - name: Run tests
        run: npm test
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: raffle
          tag-semver: |
            latest
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker images
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/raffle:latest

  # deploy:
  #   needs: build
  #   name: Deploy
  #   runs-on: [self-hosted, label-go]
  #   steps:
  #     - name: Login to ghcr
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GIT_TOKEN }}
  #     # .env 파일 생성
  #     - name: Create .env file
  #       run: |
  #         echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
  #         echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
  #         echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
  #         echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
  #         echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
  #         echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env
  #         echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
  #         echo "ES_ENDPOINT=${{ secrets.ES_ENDPOINT }}" >> .env
  #         echo "ES_USERNAME=${{ secrets.ES_USERNAME }}" >> .env
  #         echo "ES_PASSWORD=${{ secrets.ES_PASSWORD }}" >> .env
  #         echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
  #         echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env

  #     - name: Docker run
  #       run: |
  #         docker stop raffle && docker rm raffle && docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/raffle:latest
  #         docker run -d -p 3000:3000 --name raffle --restart always --env-file .env ${{ secrets.DOCKERHUB_USERNAME }}/raffle:latest

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # 프로젝트 디렉토리로 이동
            cd /home/ubuntu/raffles


            # GitHub에서 최신 코드를 가져옴
            git pull

            # .env 파일 생성
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "ES_ENDPOINT=${{ secrets.ES_ENDPOINT }}" >> .env
            echo "ES_USERNAME=${{ secrets.ES_USERNAME }}" >> .env
            echo "ES_PASSWORD=${{ secrets.ES_PASSWORD }}" >> .env
            echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env


            # node 관련 환경 설정 가져오기 위해 실행
            source /home/ubuntu/.nvm/nvm.sh
            # 서버 실행 시크립트 가동!
            source ./run.sh
